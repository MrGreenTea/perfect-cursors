{
  "version": 3,
  "sources": ["../../../node_modules/@tldraw/vec/src/index.ts", "../src/spline.ts", "../src/perfect-cursor.ts"],
  "sourcesContent": ["export class Vec {\n  /**\n   * Clamp a value into a range.\n   * @param n\n   * @param min\n   */\n  static clamp(n: number, min: number): number\n  static clamp(n: number, min: number, max: number): number\n  static clamp(n: number, min: number, max?: number): number {\n    return Math.max(min, typeof max !== 'undefined' ? Math.min(n, max) : n)\n  }\n\n  /**\n   * Clamp a value into a range.\n   * @param n\n   * @param min\n   */\n  static clampV(A: number[], min: number): number[]\n  static clampV(A: number[], min: number, max: number): number[]\n  static clampV(A: number[], min: number, max?: number): number[] {\n    return A.map((n) => (max ? Vec.clamp(n, min, max) : Vec.clamp(n, min)))\n  }\n\n  /**\n   * Negate a vector.\n   * @param A\n   */\n  static neg = (A: number[]): number[] => {\n    return [-A[0], -A[1]]\n  }\n\n  /**\n   * Add vectors.\n   * @param A\n   * @param B\n   */\n  static add = (A: number[], B: number[]): number[] => {\n    return [A[0] + B[0], A[1] + B[1]]\n  }\n\n  /**\n   * Add scalar to vector.\n   * @param A\n   * @param B\n   */\n  static addScalar = (A: number[], n: number): number[] => {\n    return [A[0] + n, A[1] + n]\n  }\n\n  /**\n   * Subtract vectors.\n   * @param A\n   * @param B\n   */\n  static sub = (A: number[], B: number[]): number[] => {\n    return [A[0] - B[0], A[1] - B[1]]\n  }\n\n  /**\n   * Subtract scalar from vector.\n   * @param A\n   * @param B\n   */\n  static subScalar = (A: number[], n: number): number[] => {\n    return [A[0] - n, A[1] - n]\n  }\n\n  /**\n   * Get the vector from vectors A to B.\n   * @param A\n   * @param B\n   */\n  static vec = (A: number[], B: number[]): number[] => {\n    // A, B as vectors get the vector from A to B\n    return [B[0] - A[0], B[1] - A[1]]\n  }\n\n  /**\n   * Vector multiplication by scalar\n   * @param A\n   * @param n\n   */\n  static mul = (A: number[], n: number): number[] => {\n    return [A[0] * n, A[1] * n]\n  }\n\n  /**\n   * Multiple two vectors.\n   * @param A\n   * @param B\n   */\n  static mulV = (A: number[], B: number[]): number[] => {\n    return [A[0] * B[0], A[1] * B[1]]\n  }\n\n  /**\n   * Vector division by scalar.\n   * @param A\n   * @param n\n   */\n  static div = (A: number[], n: number): number[] => {\n    return [A[0] / n, A[1] / n]\n  }\n\n  /**\n   * Vector division by vector.\n   * @param A\n   * @param n\n   */\n  static divV = (A: number[], B: number[]): number[] => {\n    return [A[0] / B[0], A[1] / B[1]]\n  }\n\n  /**\n   * Perpendicular rotation of a vector A\n   * @param A\n   */\n  static per = (A: number[]): number[] => {\n    return [A[1], -A[0]]\n  }\n\n  /**\n   * Dot product\n   * @param A\n   * @param B\n   */\n  static dpr = (A: number[], B: number[]): number => {\n    return A[0] * B[0] + A[1] * B[1]\n  }\n\n  /**\n   * Cross product (outer product) | A X B |\n   * @param A\n   * @param B\n   */\n  static cpr = (A: number[], B: number[]): number => {\n    return A[0] * B[1] - B[0] * A[1]\n  }\n\n  /**\n   * Cross (for point in polygon)\n   *\n   */\n  static cross(x: number[], y: number[], z: number[]): number {\n    return (y[0] - x[0]) * (z[1] - x[1]) - (z[0] - x[0]) * (y[1] - x[1])\n  }\n\n  /**\n   * Length of the vector squared\n   * @param A\n   */\n  static len2 = (A: number[]): number => {\n    return A[0] * A[0] + A[1] * A[1]\n  }\n\n  /**\n   * Length of the vector\n   * @param A\n   */\n  static len = (A: number[]): number => {\n    return Math.hypot(A[0], A[1])\n  }\n\n  /**\n   * Project A over B\n   * @param A\n   * @param B\n   */\n  static pry = (A: number[], B: number[]): number => {\n    return Vec.dpr(A, B) / Vec.len(B)\n  }\n\n  /**\n   * Get normalized / unit vector.\n   * @param A\n   */\n  static uni = (A: number[]): number[] => {\n    return Vec.div(A, Vec.len(A))\n  }\n\n  /**\n   * Get normalized / unit vector.\n   * @param A\n   */\n  static normalize = (A: number[]): number[] => {\n    return Vec.uni(A)\n  }\n\n  /**\n   * Get the tangent between two vectors.\n   * @param A\n   * @param B\n   * @returns\n   */\n  static tangent = (A: number[], B: number[]): number[] => {\n    return Vec.uni(Vec.sub(A, B))\n  }\n\n  /**\n   * Dist length from A to B squared.\n   * @param A\n   * @param B\n   */\n  static dist2 = (A: number[], B: number[]): number => {\n    return Vec.len2(Vec.sub(A, B))\n  }\n\n  /**\n   * Dist length from A to B\n   * @param A\n   * @param B\n   */\n  static dist = (A: number[], B: number[]): number => {\n    return Math.hypot(A[1] - B[1], A[0] - B[0])\n  }\n\n  /**\n   * A faster, though less accurate method for testing distances. Maybe faster?\n   * @param A\n   * @param B\n   * @returns\n   */\n  static fastDist = (A: number[], B: number[]): number[] => {\n    const V = [B[0] - A[0], B[1] - A[1]]\n    const aV = [Math.abs(V[0]), Math.abs(V[1])]\n    let r = 1 / Math.max(aV[0], aV[1])\n    r = r * (1.29289 - (aV[0] + aV[1]) * r * 0.29289)\n    return [V[0] * r, V[1] * r]\n  }\n\n  /**\n   * Angle between vector A and vector B in radians\n   * @param A\n   * @param B\n   */\n  static ang = (A: number[], B: number[]): number => {\n    return Math.atan2(Vec.cpr(A, B), Vec.dpr(A, B))\n  }\n\n  /**\n   * Angle between vector A and vector B in radians\n   * @param A\n   * @param B\n   */\n  static angle = (A: number[], B: number[]): number => {\n    return Math.atan2(B[1] - A[1], B[0] - A[0])\n  }\n\n  /**\n   * Mean between two vectors or mid vector between two vectors\n   * @param A\n   * @param B\n   */\n  static med = (A: number[], B: number[]): number[] => {\n    return Vec.mul(Vec.add(A, B), 0.5)\n  }\n\n  /**\n   * Vector rotation by r (radians)\n   * @param A\n   * @param r rotation in radians\n   */\n  static rot = (A: number[], r = 0): number[] => {\n    return [A[0] * Math.cos(r) - A[1] * Math.sin(r), A[0] * Math.sin(r) + A[1] * Math.cos(r)]\n  }\n\n  /**\n   * Rotate a vector around another vector by r (radians)\n   * @param A vector\n   * @param C center\n   * @param r rotation in radians\n   */\n  static rotWith = (A: number[], C: number[], r = 0): number[] => {\n    if (r === 0) return A\n\n    const s = Math.sin(r)\n    const c = Math.cos(r)\n\n    const px = A[0] - C[0]\n    const py = A[1] - C[1]\n\n    const nx = px * c - py * s\n    const ny = px * s + py * c\n\n    return [nx + C[0], ny + C[1]]\n  }\n\n  /**\n   * Check of two vectors are identical.\n   * @param A\n   * @param B\n   */\n  static isEqual = (A: number[], B: number[]): boolean => {\n    return A[0] === B[0] && A[1] === B[1]\n  }\n\n  /**\n   * Interpolate vector A to B with a scalar t\n   * @param A\n   * @param B\n   * @param t scalar\n   */\n  static lrp = (A: number[], B: number[], t: number): number[] => {\n    return Vec.add(A, Vec.mul(Vec.sub(B, A), t))\n  }\n\n  /**\n   * Interpolate from A to B when curVAL goes fromVAL: number[] => to\n   * @param A\n   * @param B\n   * @param from Starting value\n   * @param to Ending value\n   * @param s Strength\n   */\n  static int = (A: number[], B: number[], from: number, to: number, s = 1): number[] => {\n    const t = (Vec.clamp(from, to) - from) / (to - from)\n    return Vec.add(Vec.mul(A, 1 - t), Vec.mul(B, s))\n  }\n\n  /**\n   * Get the angle between the three vectors A, B, and C.\n   * @param p1\n   * @param pc\n   * @param p2\n   */\n  static ang3 = (p1: number[], pc: number[], p2: number[]): number => {\n    // this,\n    const v1 = Vec.vec(pc, p1)\n    const v2 = Vec.vec(pc, p2)\n    return Vec.ang(v1, v2)\n  }\n\n  /**\n   * Absolute value of a vector.\n   * @param A\n   * @returns\n   */\n  static abs = (A: number[]): number[] => {\n    return [Math.abs(A[0]), Math.abs(A[1])]\n  }\n\n  static rescale = (a: number[], n: number): number[] => {\n    const l = Vec.len(a)\n    return [(n * a[0]) / l, (n * a[1]) / l]\n  }\n\n  /**\n   * Get whether p1 is left of p2, relative to pc.\n   * @param p1\n   * @param pc\n   * @param p2\n   */\n  static isLeft = (p1: number[], pc: number[], p2: number[]): number => {\n    //  isLeft: >0 for counterclockwise\n    //          =0 for none (degenerate)\n    //          <0 for clockwise\n    return (pc[0] - p1[0]) * (p2[1] - p1[1]) - (p2[0] - p1[0]) * (pc[1] - p1[1])\n  }\n\n  /**\n   * Get whether p1 is left of p2, relative to pc.\n   * @param p1\n   * @param pc\n   * @param p2\n   */\n  static clockwise = (p1: number[], pc: number[], p2: number[]): boolean => {\n    return Vec.isLeft(p1, pc, p2) > 0\n  }\n\n  /**\n   * Round a vector to the a given precision.\n   * @param a\n   * @param d\n   */\n  static toFixed = (a: number[], d = 2): number[] => {\n    return a.map((v) => +v.toFixed(d))\n  }\n\n  /**\n   * Snap vector to nearest step.\n   * @param A\n   * @param step\n   * @example\n   * ```ts\n   * Vec.snap([10.5, 28], 10) // [10, 30]\n   * ```\n   */\n  static snap(a: number[], step = 1) {\n    return [Math.round(a[0] / step) * step, Math.round(a[1] / step) * step]\n  }\n\n  /**\n   * Get the nearest point on a line with a known unit vector that passes through point A\n   * @param A Any point on the line\n   * @param u The unit vector for the line.\n   * @param P A point not on the line to test.\n   * @returns\n   */\n  static nearestPointOnLineThroughPoint = (A: number[], u: number[], P: number[]): number[] => {\n    return Vec.add(A, Vec.mul(u, Vec.pry(Vec.sub(P, A), u)))\n  }\n\n  /**\n   * Distance between a point and a line with a known unit vector that passes through a point.\n   * @param A Any point on the line\n   * @param u The unit vector for the line.\n   * @param P A point not on the line to test.\n   * @returns\n   */\n  static distanceToLineThroughPoint = (A: number[], u: number[], P: number[]): number => {\n    return Vec.dist(P, Vec.nearestPointOnLineThroughPoint(A, u, P))\n  }\n\n  /**\n   * Get the nearest point on a line segment between A and B\n   * @param A The start of the line segment\n   * @param B The end of the line segment\n   * @param P The off-line point\n   * @param clamp Whether to clamp the point between A and B.\n   * @returns\n   */\n  static nearestPointOnLineSegment = (\n    A: number[],\n    B: number[],\n    P: number[],\n    clamp = true\n  ): number[] => {\n    const u = Vec.uni(Vec.sub(B, A))\n    const C = Vec.add(A, Vec.mul(u, Vec.pry(Vec.sub(P, A), u)))\n\n    if (clamp) {\n      if (C[0] < Math.min(A[0], B[0])) return A[0] < B[0] ? A : B\n      if (C[0] > Math.max(A[0], B[0])) return A[0] > B[0] ? A : B\n      if (C[1] < Math.min(A[1], B[1])) return A[1] < B[1] ? A : B\n      if (C[1] > Math.max(A[1], B[1])) return A[1] > B[1] ? A : B\n    }\n\n    return C\n  }\n\n  /**\n   * Distance between a point and the nearest point on a line segment between A and B\n   * @param A The start of the line segment\n   * @param B The end of the line segment\n   * @param P The off-line point\n   * @param clamp Whether to clamp the point between A and B.\n   * @returns\n   */\n  static distanceToLineSegment = (A: number[], B: number[], P: number[], clamp = true): number => {\n    return Vec.dist(P, Vec.nearestPointOnLineSegment(A, B, P, clamp))\n  }\n\n  /**\n   * Push a point A towards point B by a given distance.\n   * @param A\n   * @param B\n   * @param d\n   * @returns\n   */\n  static nudge = (A: number[], B: number[], d: number): number[] => {\n    if (Vec.isEqual(A, B)) return A\n    return Vec.add(A, Vec.mul(Vec.uni(Vec.sub(B, A)), d))\n  }\n\n  /**\n   * Push a point in a given angle by a given distance.\n   * @param A\n   * @param B\n   * @param d\n   */\n  static nudgeAtAngle = (A: number[], a: number, d: number): number[] => {\n    return [Math.cos(a) * d + A[0], Math.sin(a) * d + A[1]]\n  }\n\n  /**\n   * Round a vector to a precision length.\n   * @param a\n   * @param n\n   */\n  static toPrecision = (a: number[], n = 4): number[] => {\n    return [+a[0].toPrecision(n), +a[1].toPrecision(n)]\n  }\n\n  /**\n   * Get an array of points (with simulated pressure) between two points.\n   * @param A The first point.\n   * @param B The second point.\n   * @param steps The number of points to return.\n   */\n  static pointsBetween = (A: number[], B: number[], steps = 6): number[][] => {\n    return Array.from(Array(steps)).map((_, i) => {\n      const t = i / (steps - 1)\n      const k = Math.min(1, 0.5 + Math.abs(0.5 - t))\n      return [...Vec.lrp(A, B, t), k]\n    })\n  }\n\n  /**\n   * Get the slope between two points.\n   * @param A\n   * @param B\n   */\n  static slope = (A: number[], B: number[]) => {\n    if (A[0] === B[0]) return NaN\n    return (A[1] - B[1]) / (A[0] - B[0])\n  }\n\n  /**\n   * Get a vector comprised of the maximum of two or more vectors.\n   */\n  static max = (...v: number[][]) => {\n    return [Math.max(...v.map((a) => a[0])), Math.max(...v.map((a) => a[1]))]\n  }\n\n  /**\n   * Get a vector comprised of the minimum of two or more vectors.\n   */\n  static min = (...v: number[][]) => {\n    return [Math.max(...v.map((a) => a[0])), Math.max(...v.map((a) => a[1]))]\n  }\n}\n\nexport default Vec\n", "import { Vec } from \"@tldraw/vec\"\n\nexport class Spline {\n  points: number[][] = []\n\n  lengths: number[] = []\n\n  totalLength = 0\n\n  private prev?: number[]\n\n  constructor(points: number[][] = []) {\n    this.points = points\n    this.lengths = points.map((point, i, arr) =>\n      i === 0 ? 0 : Vec.dist(point, arr[i - 1])\n    )\n    this.totalLength = this.lengths.reduce((acc, cur) => acc + cur, 0)\n  }\n\n  addPoint = (point: number[]) => {\n    if (this.prev) {\n      const length = Vec.dist(this.prev, point)\n      this.lengths.push(length)\n      this.totalLength += length\n      this.points.push(point)\n    }\n    this.prev = point\n  }\n\n  clear = () => {\n    this.points = this.prev ? [this.prev] : []\n    this.totalLength = 0\n  }\n\n  getSplinePoint = (t: number): number[] => {\n    const { points } = this\n    const l = points.length - 1,\n      d = Math.trunc(t),\n      p1 = Math.min(d + 1, l),\n      p2 = Math.min(p1 + 1, l),\n      p3 = Math.min(p2 + 1, l),\n      p0 = p1 - 1\n    t = t - d\n    const tt = t * t,\n      ttt = tt * t,\n      q1 = -ttt + 2 * tt - t,\n      q2 = 3 * ttt - 5 * tt + 2,\n      q3 = -3 * ttt + 4 * tt + t,\n      q4 = ttt - tt\n    return [\n      0.5 *\n        (points[p0][0] * q1 +\n          points[p1][0] * q2 +\n          points[p2][0] * q3 +\n          points[p3][0] * q4),\n      0.5 *\n        (points[p0][1] * q1 +\n          points[p1][1] * q2 +\n          points[p2][1] * q3 +\n          points[p3][1] * q4),\n    ]\n  }\n}\n", "import { Vec } from \"@tldraw/vec\"\nimport { Spline } from \"./spline\"\n\ntype AnimationState = \"stopped\" | \"idle\" | \"animating\"\n\ntype Animation = {\n  curve: boolean\n  from: number[]\n  to: number[]\n  start: number\n  distance: number\n  timeStamp: number\n  duration: number\n}\n\nexport class PerfectCursor {\n  state: AnimationState = \"idle\"\n  queue: Animation[] = []\n  timestamp = performance.now()\n  lastRequestId = 0\n  timeoutId: any = 0\n  prevPoint = [0, 0]\n  spline = new Spline()\n  cb: (point: number[]) => void\n\n  constructor(cb: (point: number[]) => void) {\n    this.cb = cb\n  }\n\n  addPoint = (point: number[]) => {\n    const now = performance.now()\n    if (this.state === \"stopped\") {\n      this.timestamp = now\n      this.prevPoint = point\n      this.spline.clear()\n    }\n    this.spline.addPoint(point)\n    const animation: Animation = {\n      distance: this.spline.totalLength,\n      curve: this.spline.points.length > 3,\n      start: this.spline.points.length - 3,\n      from: this.prevPoint,\n      to: point,\n      timeStamp: now,\n      duration: Math.min(now - this.timestamp, 300),\n    }\n    this.prevPoint = point\n    this.timestamp = now\n    switch (this.state) {\n      case \"stopped\": {\n        this.prevPoint = point\n        this.state = \"idle\"\n        break\n      }\n      case \"idle\": {\n        this.state = \"animating\"\n        this.animateNext(animation)\n        break\n      }\n      case \"animating\": {\n        this.queue.push(animation)\n        break\n      }\n    }\n  }\n\n  animateNext = (animation: Animation) => {\n    const start = performance.now()\n    const loop = () => {\n      const t = (performance.now() - start) / animation.duration\n      if (t <= 1 && this.spline.points.length > 0) {\n        try {\n          this.cb(\n            animation.curve\n              ? this.spline.getSplinePoint(t + animation.start)\n              : Vec.lrp(animation.from, animation.to, t)\n          )\n        } catch (e) {\n          console.warn(e)\n        }\n        this.lastRequestId = requestAnimationFrame(loop)\n        return\n      }\n      const next = this.queue.shift()\n      if (next) {\n        this.state = \"animating\"\n        this.animateNext(next)\n      } else {\n        this.state = \"idle\"\n        this.timeoutId = setTimeout(() => {\n          this.state = \"stopped\"\n        }, 250)\n      }\n    }\n    loop()\n  }\n\n  dispose = () => {\n    clearTimeout(this.timeoutId)\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
